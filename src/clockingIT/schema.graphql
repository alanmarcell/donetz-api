
type ClockingItLogEdge implements Edge {
  cursor: String!
  node: ClockingItLog
}

type ClockingItLogConnection implements Connection {
  edges: [ClockingItLogEdge]
  nodes: [ClockingItLog]
  pageInfo: PageInfo!
  totalCount: Int!
}

type Query {
  clockingItLog(id: ID!): ClockingItLog
  clockingWeekLog(startedAt: String!): [ClockingItLog]
  clockingItLogs(    
    search: String,
    first: Int,
    after: String,
    last: Int,
    before: String,
    orderBy: BaseOrder
  ): ClockingItLogConnection
}

type ClockingItLog implements Node { 
  id: ID!,
  duration: String!,
  startedAt: Date!,
  body: String!,
  lastSync: String,
  saveSuccess: Boolean
}

# type Session {
#   token: String!
# }

type SaveClockingItLogPayload {
 saveSuccess: Boolean!
}

input ClockingItLogInput {
  id: ID!
  duration: String,
  startedAt: Date,
  body: String,
}

input CreateClockingItLogInput {
  id: ID
  duration: String!,
  startedAt: Date!,
  body: String!,
}

type Mutation {
  createClockingItLog(log: CreateClockingItLogInput): SaveClockingItLogPayload!
  updateClockingItLog(log: ClockingItLogInput): SaveClockingItLogPayload!
  syncClockingItLog(log: ClockingItLogInput): SaveClockingItLogPayload!
}
