
type RescueTimeDailyReportEdge implements Edge {
  cursor: String!
  node: RescueTimeDailyReport
}

type RescueTimeDailyReportConnection implements Connection {
  edges: [RescueTimeDailyReportEdge]
  nodes: [RescueTimeDailyReport]
  pageInfo: PageInfo!
  totalCount: Int!
}

type Query {
  rescueTimeDailyReport(id: ID, date: String): RescueTimeDailyReport
  rescueTimeDailyReports(    
    search: String,
    first: Int,
    after: String,
    last: Int,
    before: String,
    orderBy: BaseOrder
  ): RescueTimeDailyReportConnection
}

type RescueTimeActivity {
  date: String,
  timeSpent: Int,
  activity: String,
  document: String
}

type RescueTimeDailyReport implements Node { 
  id: ID!,
  date: String!,
  activities: [RescueTimeActivity]
}

# type Session {
#   token: String!
# }

# type CreateRescueTimeDailyReportPayload {
#  syncSuccess: Boolean!
# }

# input CreateRescueTimeDailyReportInput {
#   id: ID
#   duration: String!,
#   startedAt: String!,
#   body: String!,
# }

# type Mutation {
#   createRescueTimeDailyReport(log: CreateRescueTimeDailyReportInput): CreateRescueTimeDailyReportPayload!
# }
